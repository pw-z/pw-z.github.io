#include<iostream>
#include "my_heap.h"
#include<time.h>

using namespace pwz;
using std::cout;

/*
测试用例的生成：

正序数组：{0,1,2,3,4,5,6,7,8,9,10...},
逆序数组：{999,998,997...},
重复的数：{字面意思},
随机数组：{利用rand函数生成0~999之间的随机数},
极端的长：{元素同随机数组，但长度为传参长度的平方}
*/
void testcase_generator(int len){
    cout<<"正序数组： \n{";
    for(int i=0; i<len-1; ++i) cout<<i<<", ";
    cout<<len-1<<"}\n";

    cout<<"逆序数组： \n{";
    for(int i=len; i>0; --i) cout<<i<<", ";
    cout<<0<<"}\n";

    cout<<"重复的数： \n{";
    for(int i=len; i>0; --i) cout<<1<<", ";
    cout<<1<<"}\n";

    cout<<"随机数组： \n{";
    for(int i=0; i<len-1; ++i) cout<<rand()%999<<", ";
    cout<<rand()%999<<"}\n";


    cout<<"极端的长： \n{";
    int llen = len*len;
    for(int i=0; i<llen; ++i) cout<<rand()%999<<", ";
    cout<<rand()%999<<"}\n";
}


void min_heap_recursive_test(){
    vector<vector<int>> cases = {
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
        {50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}       ,
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {41, 485, 340, 526, 188, 739, 489, 387, 988, 488, 710, 173, 304, 843, 970, 491, 997, 953, 831, 441, 423, 618, 905, 153, 292, 394, 438, 734, 737, 914, 452, 747, 785, 549, 870, 931, 692, 325, 52, 903, 731, 834, 353, 363, 690, 668, 156, 718, 281, 874}
    };
    for(vector<int> _case: cases){
        min_heap* my_heap = new min_heap(_case, _case.size(), 0);
        my_heap->to_string();
    }
}

void min_heap_non_recursive_test(){
    vector<vector<int>> cases = {
        {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
        {50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0}       ,
        {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
        {41, 485, 340, 526, 188, 739, 489, 387, 988, 488, 710, 173, 304, 843, 970, 491, 997, 953, 831, 441, 423, 618, 905, 153, 292, 394, 438, 734, 737, 914, 452, 747, 785, 549, 870, 931, 692, 325, 52, 903, 731, 834, 353, 363, 690, 668, 156, 718, 281, 874}
    };
    for(vector<int> _case: cases){
        min_heap* my_heap = new min_heap(_case, _case.size(), 1);
        my_heap->to_string();
    }
}

void performance(){
    vector<int> test_data;
    for(int i=1000000; i>0; --i){
        test_data.push_back(rand()%9999);
    }
    vector<int> test_data2(test_data);
    cout<<&test_data<<"\n"<<&test_data2<<"\n";

    clock_t start,end;
    start = clock();
    min_heap* heap1 = new min_heap(test_data, test_data.size(), 1);
    end = clock();
    cout<<"非递归耗时："<<double(end-start)*1000/CLOCKS_PER_SEC<<" ms\n";


    start = clock();
    min_heap* heap2 = new min_heap(test_data2, test_data2.size(), 0);
    end = clock();
    cout<<"递归耗时："<<double(end-start)*1000/CLOCKS_PER_SEC<<" ms\n";
}
/*
0x62fd50
0x62fd30
非递归耗时：58 ms
递归耗时：43 ms
*/

int main(int argc, char const *argv[])
{
    // testcase_generator(50);

    min_heap_recursive_test();
    min_heap_non_recursive_test();
    // performance();

    return 0;
}
/*
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 
0 4 1 12 5 2 20 16 13 8 6 3 24 22 21 18 17 14 32 10 9 7 28 27 26 25 38 23 37 44 36 19 35 43 34 15 33 42 47 11 31 41 30 49 29 40 46 48 50 39 45 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
41 52 153 325 156 173 452 387 485 353 188 281 304 734 489 491 549 692 526 441 423 363 668 340 292 394 438 843 737 914 970 747 785 997 870 931 953 988 831 903 731 834 488 618 690 710 905 718 739 874 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 
0 5 1 14 6 2 22 19 15 11 7 3 27 25 23 34 20 18 16 30 12 10 8 26 4 45 28 46 38 39 24 50 41 44 29 47 35 36 17 48 33 42 13 43 31 32 9 49 37 40 21 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 
41 52 153 188 156 173 452 491 325 423 353 281 340 734 489 526 549 831 387 488 441 618 363 292 304 394 438 843 737 970 914 747 785 997 870 988 931 953 692 903 731 834 485 710 690 905 668 739 718 874
*/